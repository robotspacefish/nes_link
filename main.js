const btns = document.querySelectorAll('button');
const link = document.getElementById('link');
let frame = 0;
let intervalID = null;

// create boxes
for (let i = 0; i < 256; i++) {
  const box = document.createElement('div');
  box.classList.add('box');
  link.appendChild(box);
}

btns.forEach(button => {
  button.addEventListener('click', (e) => {
    const id = e.target.id;
    console.log("id:", id);
    clearInterval(intervalID);
    switch (id) {
      case 'right':
        intervalID = setInterval(drawRight, 300);
        break;
      case 'down':
        intervalID = setInterval(drawDown, 300);
        break;
      case 'up':
        intervalID = setInterval(drawUp, 300);
        break;
      case 'left':
        debugger
        intervalID = setInterval(drawLeft, 300);
        break;
      case 'start':
        console.log('canceling animation')
        clearInterval(intervalID);
    }

  })
})

const colors = [
  'white',
  'PeachPuff',
  'Green',
  'Chocolate'
]

const downFrames = [
  [
    0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0,
    0, 0, 1, 0, 2, 3, 3, 3, 3, 3, 3, 2, 0, 1, 0, 0,
    0, 0, 1, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 1, 0, 0,
    0, 0, 1, 1, 3, 1, 2, 1, 1, 2, 1, 3, 1, 1, 0, 0,
    0, 0, 1, 1, 3, 1, 3, 1, 1, 3, 1, 3, 1, 1, 0, 0,
    0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 0, 0,
    0, 0, 0, 0, 2, 1, 1, 3, 3, 1, 1, 2, 3, 3, 0, 0,
    0, 0, 3, 3, 3, 3, 3, 1, 1, 1, 2, 2, 2, 1, 0, 0,
    0, 3, 3, 1, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 0, 0,
    0, 3, 1, 1, 1, 3, 3, 1, 3, 3, 2, 2, 3, 0, 0, 0,
    0, 3, 3, 1, 3, 3, 3, 1, 2, 3, 3, 3, 1, 0, 0, 0,
    0, 3, 3, 1, 3, 3, 3, 1, 3, 3, 2, 2, 2, 0, 0, 0,
    0, 3, 3, 3, 3, 3, 3, 1, 2, 2, 2, 3, 0, 0, 0, 0,
    0, 0, 1, 1, 1, 1, 1, 0, 0, 3, 3, 3, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0
  ],
  [
    0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0,
    0, 0, 1, 0, 2, 3, 3, 3, 3, 3, 3, 2, 0, 1, 0, 0,
    0, 0, 1, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 1, 0, 0,
    0, 0, 1, 1, 3, 1, 2, 1, 1, 2, 1, 3, 1, 1, 0, 0,
    0, 0, 1, 1, 3, 1, 3, 1, 1, 3, 1, 3, 1, 1, 0, 0,
    0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 0, 0,
    0, 0, 0, 2, 2, 1, 1, 3, 3, 1, 1, 2, 2, 3, 0, 0,
    0, 3, 3, 3, 3, 3, 1, 1, 1, 1, 2, 2, 3, 3, 3, 0,
    3, 3, 1, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 3, 3, 0,
    3, 1, 1, 1, 3, 3, 1, 3, 3, 2, 2, 1, 1, 1, 3, 0,
    3, 3, 1, 3, 3, 3, 1, 2, 3, 3, 3, 3, 1, 1, 1, 0,
    3, 3, 1, 3, 3, 3, 1, 3, 3, 2, 2, 2, 2, 1, 0, 0,
    3, 3, 3, 3, 3, 3, 1, 2, 2, 2, 2, 2, 0, 0, 0, 0,
    0, 1, 1, 1, 1, 1, 3, 0, 0, 3, 3, 3, 0, 0, 0, 0,
    0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0
  ]
];

const rightFrames = [
  [
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 2, 2, 2, 2, 2, 3, 3, 3, 3, 0, 0, 0, 0,
    0, 2, 2, 2, 1, 2, 2, 3, 3, 3, 3, 3, 3, 0, 0, 0,
    2, 2, 2, 2, 1, 1, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0,
    2, 0, 2, 2, 1, 1, 1, 3, 1, 1, 2, 1, 0, 0, 0, 0,
    0, 0, 2, 3, 3, 1, 1, 3, 1, 1, 3, 1, 1, 1, 0, 0,
    0, 0, 0, 3, 3, 3, 1, 1, 1, 1, 1, 1, 0, 3, 0, 0,
    0, 0, 0, 0, 2, 2, 2, 2, 1, 1, 1, 1, 0, 3, 0, 0,
    0, 0, 2, 3, 3, 2, 2, 1, 1, 1, 3, 3, 1, 3, 0, 0,
    0, 0, 3, 3, 3, 3, 3, 1, 1, 1, 2, 3, 1, 3, 0, 0,
    0, 2, 3, 3, 3, 3, 3, 1, 1, 2, 2, 3, 0, 3, 0, 0,
    0, 2, 2, 3, 3, 3, 3, 2, 2, 2, 3, 0, 0, 3, 0, 0,
    3, 3, 2, 2, 2, 2, 2, 3, 3, 3, 3, 2, 0, 3, 0, 0,
    3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 0, 0, 0,
    0, 3, 3, 3, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0
  ],
  [
    0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 2, 2, 2, 2, 2, 3, 3, 3, 3, 0, 0, 0, 0,
    0, 2, 2, 2, 1, 2, 2, 3, 3, 3, 3, 3, 0, 0, 0, 0,
    2, 2, 2, 2, 1, 1, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0,
    2, 0, 2, 2, 1, 1, 1, 3, 1, 1, 2, 1, 0, 0, 3, 0,
    0, 0, 2, 3, 3, 1, 1, 3, 1, 1, 3, 1, 1, 1, 3, 0,
    0, 0, 0, 3, 3, 3, 1, 1, 1, 1, 1, 1, 0, 0, 3, 0,
    0, 0, 0, 0, 2, 2, 2, 2, 1, 1, 1, 1, 0, 0, 3, 0,
    0, 0, 3, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 1, 3, 0,
    0, 3, 3, 3, 2, 1, 1, 1, 2, 2, 2, 3, 3, 1, 3, 0,
    0, 3, 3, 3, 3, 1, 1, 1, 2, 2, 2, 3, 3, 0, 3, 0,
    0, 3, 3, 3, 3, 1, 1, 2, 2, 2, 3, 0, 0, 0, 3, 0,
    0, 0, 2, 3, 3, 2, 2, 3, 3, 3, 3, 0, 0, 0, 3, 0,
    0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0
  ]
];

const upFrames = [
  [
    0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0,
    0, 0, 1, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 1, 0, 0,
    0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0,
    0, 0, 1, 3, 2, 2, 2, 2, 2, 2, 2, 2, 3, 1, 0, 0,
    0, 0, 1, 1, 3, 3, 2, 2, 2, 2, 3, 3, 1, 1, 0, 0,
    0, 0, 0, 1, 3, 3, 3, 2, 2, 3, 3, 3, 1, 0, 0, 0,
    0, 0, 0, 3, 2, 3, 3, 3, 3, 3, 3, 2, 3, 0, 0, 0,
    0, 0, 3, 3, 2, 2, 2, 2, 2, 2, 2, 3, 3, 0, 0, 0,
    0, 0, 3, 3, 2, 2, 2, 2, 2, 2, 2, 3, 3, 1, 0, 0,
    0, 0, 0, 3, 3, 2, 2, 2, 2, 2, 2, 3, 3, 1, 0, 0,
    0, 0, 0, 2, 2, 3, 3, 3, 3, 3, 3, 2, 1, 1, 0, 0,
    0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0,
    0, 0, 0, 3, 3, 3, 2, 2, 2, 2, 2, 3, 0, 0, 0, 0,
    0, 0, 0, 3, 3, 3, 3, 0, 0, 3, 3, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  ],
  [
    0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0,
    0, 0, 1, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 1, 0, 0,
    0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0,
    0, 0, 1, 3, 2, 2, 2, 2, 2, 2, 2, 2, 3, 1, 0, 0,
    0, 0, 1, 1, 3, 3, 2, 2, 2, 2, 3, 3, 1, 1, 0, 0,
    0, 0, 0, 1, 3, 3, 3, 2, 2, 3, 3, 3, 1, 0, 0, 0,
    0, 0, 0, 3, 2, 3, 3, 3, 3, 3, 3, 2, 3, 0, 0, 0,
    0, 0, 0, 3, 3, 2, 2, 2, 2, 2, 2, 2, 3, 3, 0, 0,
    0, 0, 1, 3, 3, 2, 2, 2, 2, 2, 2, 2, 3, 3, 0, 0,
    0, 0, 1, 3, 3, 2, 2, 2, 2, 2, 2, 3, 3, 0, 0, 0,
    0, 0, 1, 1, 2, 3, 3, 3, 3, 3, 3, 2, 2, 0, 0, 0,
    0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0,
    0, 0, 0, 3, 2, 2, 2, 2, 2, 2, 3, 3, 3, 0, 0, 0,
    0, 0, 0, 0, 3, 3, 3, 0, 0, 3, 3, 3, 3, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0
  ]
];

function drawUp() {
  advanceFrames(upFrames.length);
  loopThroughFrames(upFrames);
};

function drawRight() {
  advanceFrames(rightFrames.length);
  loopThroughFrames(rightFrames);
};

function drawDown() {
  advanceFrames(downFrames.length);
  loopThroughFrames(downFrames);
};

function drawLeft() {
  advanceFrames(leftFrames.length);
  loopThroughFrames(leftFrames);
}

function flipCharacter(original, rowLength, colLength) {
  let flipped = [];
  for (let i = 0; i < rowLength * colLength; i += rowLength) {
    const row = original.slice(i, i + rowLength).reverse();
    console.log(row)
    flipped = flipped.concat(row);
  }
  return flipped;
};

function advanceFrames(len) {
  frame++;
  if (frame >= len) {
    frame = 0;
  }
};

function loopThroughFrames(frames) {
  Array.prototype.slice.call(link.children).forEach((box, i) => {
    box.classList.add(i);
    box.style.backgroundColor = colors[frames[frame][i]];
  })
}

// start facing right
drawRight();

// create left frames from right frames
const leftFrames = [
  flipCharacter(rightFrames[0], 16, 16),
  flipCharacter(rightFrames[1], 16, 16)
];